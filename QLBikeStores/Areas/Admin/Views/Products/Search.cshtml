@model IEnumerable<QLBikeStores.Models.Product>

@{
    ViewData["Title"] = "Search";
}
@*<style>
    .pagination-container {
        display: flex;
        flex: 1;
    }

    .pagination {
        display: flex;
        flex: 1;
        list-style: none;
        padding: 0;
        gap: .625rem;
    }

    .page-item, .page-link {
        height: 2rem;
        width: 2rem;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .PagedList-pageCountAndLocation {
        justify-content: start;
        order: -1;
        flex: 1;
        /*expands the div to max available width*/
    }
</style>*@
<h1>Product Portfolio</h1>
<div>
    <form asp-action="Search" method="post" class="form-inline">
        Enter product name: &nbsp; <input type="text" name="name" />&nbsp; Price from: &nbsp; <input type="number" name="to" />&nbsp; To: &nbsp; <input type="number" name="from" /> &ensp; <button class="btn btn-primary" style="width:100px;"><i class="fas fa-search"></i>&nbsp;<span>Search</span></button>
    </form>
</div>
<br>

<table class="table table-bordered">
    <thead class="thead-dark">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ProductName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ModelYear)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ListPrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Brand)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ProductName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ModelYear)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ListPrice)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Brand.BrandName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Category.CategoryName)
                </td>
                <td>
                    <button type="button" class="btn btn-primary">
                        <a style="color:white;" asp-action="Create">Create New</a>
                    </button>
                    <button type="button" class="btn btn-success">
                        <a style="color:white;" asp-action="Edit" asp-route-id="@item.ProductId">Edit</a>
                    </button>

                    <button type="button" class="btn btn-info">
                        <a style="color:white;" asp-action="Details" asp-route-id="@item.ProductId">Details</a>
                    </button>

                    <button type="button" class="btn btn-danger">
                        <a style="color:white;" asp-action="Delete" asp-route-id="@item.ProductId">Delete</a>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<div>
    <button type="button" class="btn btn-warning">
        <a style="color:white" asp-action="Index">Back to List</a>
    </button>
</div>
@*@Html.PagedListPager((IPagedList)Model,
    pageNo => Url.Action("Index", new { pageNo }),
    new PagedListRenderOptions{
    PageClasses = new string[] { "page-link" },
    UlElementClasses = new string[] { "pagination" },
    LiElementClasses = new string[] { "page-item" },
    DisplayItemSliceAndTotal = true,
    DisplayEllipsesWhenNotShowingAllPageNumbers = true,
    DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
    DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded
    }
    )*@
